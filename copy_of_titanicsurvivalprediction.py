# -*- coding: utf-8 -*-
"""Copy of TitanicSurvivalPrediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ru4xoiawq0K1MU7qN__s00VFPty782Cr

**IMPORTING THE DEPENDENCIES**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""**DATA COLLECTON AND PROCESSING**"""

#load the data from csv file to pandas data frame
titanic_data=pd.read_csv('/train.csv')

titanic_data.head()

#number of rows and columns
titanic_data.shape

#getting information about data
titanic_data.info()

#check the number of missing values in each column
titanic_data.isnull().sum()



"""dropped the cabin column


"""

#replacing the missing value in "Age" column with mean value
titanic_data['Age'].fillna(titanic_data['Age'].mean(),inplace=True)

# finding the mode value of "Embarked" column
print(titanic_data['Embarked'].mode())

print(titanic_data['Embarked'].mode()[0])

#replacing the missing values in "Embarked" column with mode value
titanic_data['Embarked'].fillna(titanic_data['Embarked'].mode()[0],inplace=True)

#check the missing values in each column
titanic_data.isnull().sum()

"""**DATA ANALYSIS**"""

# getting some statistical measures about the data
titanic_data.describe()

#finding the number of people survuved and not survived
titanic_data['Survived'].value_counts()

"""**DATA VISUALIZATION**"""

sns.set()

#making a count plot for "Survived" column
sns.countplot(x='Survived', data=titanic_data)

sns.countplot(x='Sex', data=titanic_data)

#number of survivors gender wise
sns.countplot(x='Sex', hue='Survived', data=titanic_data)

sns.countplot(x='Embarked', data=titanic_data)

#number of survivors Pclass wise
sns.countplot(x='Pclass', hue='Survived', data=titanic_data)

"""**ENCODING THE CATEGORICAL COLUMNS**"""

titanic_data['Sex'].value_counts()

titanic_data['Embarked'].value_counts()

#converting categorical columns
titanic_data.replace({'Sex':{'male':0,'female':1}, 'Embarked':{'S':0,'C':1,'Q':2}}, inplace=True)

titanic_data.head()

"""**SEPARATING FEATURES AND TARGET**"""

X=titanic_data.drop(columns=['PassengerId','Name','Ticket','Survived'],axis=1)
Y=titanic_data['Survived']

print(X)

print(Y)

"""**SPLITTING THE DATA INTO TRAINING DATA AND TEST DATA**"""

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""**MODEL TRAINING**

LOGISTIC REGRESSION
"""

model=LogisticRegression()

# training the logistic Regression model with training data
model.fit(X_train,Y_train)

"""**MODEL EVALUATION**

ACCURACY SCORE
"""

#accuracy on training data
X_train_prediction=model.predict(X_train)

print(X_train_prediction)

training_data_accuracy=accuracy_score(Y_train,X_train_prediction)
print('Accuracy score of training data:',training_data_accuracy)

#accuracy on test data
X_test_prediction=model.predict(X_test)

print(X_test_prediction)

test_data_accuracy=accuracy_score(Y_test,X_test_prediction)
print('Accuracy score of test data:',test_data_accuracy)

